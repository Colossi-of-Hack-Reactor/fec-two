/**
 * @jest-environment jsdom
 */

import React from 'react';
import '@testing-library/jest-dom';
import userEvent from '@testing-library/user-event';
import {render, fireEvent, screen, waitFor, waitForElementToBeRemoved} from '@testing-library/react';
import axios from 'axios';
import App from '../src/app.jsx';

axios.defaults.baseURL = 'http://localhost:3000';

describe('Overview component', function() {
  jest.setTimeout(15000);

  it('should render properly', async () => {
    render(<App />);
    const user = userEvent.setup();
    await waitForElementToBeRemoved(() => screen.getByTestId('loading'));
    await new Promise((r) => setTimeout(r, 500));
    expect(screen.getByTestId('category')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('productName')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('price')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('style')).toHaveTextContent(/^STYLE > .+$/);
    expect(screen.getByTestId('styleGrid')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('sloganDescription')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('features')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('imageGallery')).not.toBeEmptyDOMElement();
    expect(screen.getByTestId('selectSizeMsg')).not.toBeVisible();
    expect(screen.getByTestId('qtySelect')).toBeDisabled();
    await user.click(screen.getByTestId('qtySelectSpan'));
    expect(screen.getByTestId('selectSizeMsg')).toBeVisible();
    await waitFor(() => {
      expect(screen.getByTestId('selectSizeMsg')).not.toBeVisible();
    }, {timeout: 3000});
    await user.click(screen.getByRole('button', {name: 'Add to Bag'}));
    expect(screen.getByTestId('selectSizeMsg')).toBeVisible();
    await waitFor(() => {
      expect(screen.getByTestId('selectSizeMsg')).not.toBeVisible();
    }, {timeout: 3000});
    await user.selectOptions(screen.getByTestId('sizeSelect'), screen.getByRole('option', {name: 'S'}));
    expect(screen.getByTestId('qtySelect')).toHaveDisplayValue('1');
    await user.selectOptions(screen.getByTestId('qtySelect'), screen.getByRole('option', {name: '2'}));
    expect(screen.getByTestId('qtySelect')).toHaveDisplayValue('2');
    await user.click(screen.getByTestId('qtySelectSpan'));
    expect(screen.getByTestId('selectSizeMsg')).not.toBeVisible();
    await user.click(screen.getByRole('button', {name: 'Add to Bag'}));
    expect(screen.getByTestId('selectSizeMsg')).not.toBeVisible();
    const style0 = screen.getByTestId('style').innerHTML;
    await user.click(screen.getByTestId('style-1'));
    const style1 = screen.getByTestId('style').innerHTML;
    expect(style0).not.toEqual(style1);
    expect(screen.getByTestId('sizeSelect')).toHaveDisplayValue('Select Size');
    expect(screen.getByTestId('qtySelect')).toBeDisabled();
    expect(screen.getByTestId('leftArrow')).not.toBeVisible();
    expect(screen.getByTestId('rightArrow')).toBeVisible();
    expect(screen.getByTestId('upArrow')).not.toBeVisible();
    expect(screen.getByTestId('downArrow')).not.toBeVisible();
    expect(screen.getByTestId('bigImg-0')).toBeVisible();
    expect(screen.getByTestId('bigImg-1')).not.toBeVisible();
    await user.click(screen.getByTestId('thumbnailImg-1'));
    expect(screen.getByTestId('bigImg-0')).not.toBeVisible();
    expect(screen.getByTestId('bigImg-1')).toBeVisible();
    await user.click(screen.getByTestId('leftArrow'));
    expect(screen.getByTestId('bigImg-0')).toBeVisible();
    expect(screen.getByTestId('bigImg-1')).not.toBeVisible();
    await user.click(screen.getByTestId('leftArrow'));
    expect(screen.getByTestId('bigImg-0')).toBeVisible();
    expect(screen.getByTestId('bigImg-1')).not.toBeVisible();
    await user.click(screen.getByTestId('rightArrow'));
    expect(screen.getByTestId('bigImg-0')).not.toBeVisible();
    expect(screen.getByTestId('bigImg-1')).toBeVisible();
    await user.click(screen.getByTestId('style-0'));
    expect(screen.getByTestId('bigImg-0')).not.toBeVisible();
    expect(screen.getByTestId('bigImg-1')).toBeVisible();
    await user.click(screen.getByText(/YEasy 350/));
    await waitForElementToBeRemoved(() => screen.getByTestId('loading'));
    await new Promise((r) => setTimeout(r, 500));
    expect(screen.getByTestId('upArrow')).not.toBeVisible();
    expect(screen.getByTestId('downArrow')).toBeVisible();
    await user.click(screen.getByTestId('bigImg-1'));
    expect(screen.getByTestId('zoomZoom')).toBeVisible();
    expect(screen.getByTestId('expandedThumbnail-0')).toBeVisible();
    expect(screen.getByTestId('expandedLeftArrow')).toBeVisible();
    expect(screen.getByTestId('expandedRightArrow')).toBeVisible();
    expect(screen.getByTestId('closeExpanded')).toBeVisible();
    expect(screen.getByTestId('toggleFullscreen')).toBeVisible();
    const zoomzoomBG0 = screen.getByTestId('zoomZoom').style.backgroundImage;
    await user.click(screen.getByTestId('expandedRightArrow'));
    const zoomzoomBG1 = screen.getByTestId('zoomZoom').style.backgroundImage;
    expect(style0).not.toEqual(style1);
    await user.click(screen.getByTestId('expandedLeftArrow'));
    expect(screen.getByTestId('zoomZoom').style.backgroundImage).toEqual(zoomzoomBG0);
    await user.keyboard('[ArrowRight]');
    expect(screen.getByTestId('zoomZoom').style.backgroundImage).toEqual(zoomzoomBG1);
    await user.keyboard('[ArrowLeft]');
    expect(screen.getByTestId('zoomZoom').style.backgroundImage).toEqual(zoomzoomBG0);
    await user.keyboard('[Space]');
    expect(screen.queryByTestId('expandedThumbnail-0')).not.toBeInTheDocument();
    expect(screen.queryByTestId('expandedLeftArrow')).not.toBeInTheDocument();
    expect(screen.queryByTestId('expandedRightArrow')).not.toBeInTheDocument();
    expect(screen.queryByTestId('closeExpanded')).not.toBeInTheDocument();
    expect(screen.queryByTestId('toggleFullscreen')).not.toBeInTheDocument();
    await user.keyboard('[Space]');
    expect(screen.getByTestId('expandedThumbnail-0')).toBeVisible();
    expect(screen.getByTestId('expandedLeftArrow')).toBeVisible();
    expect(screen.getByTestId('expandedRightArrow')).toBeVisible();
    expect(screen.getByTestId('closeExpanded')).toBeVisible();
    expect(screen.getByTestId('toggleFullscreen')).toBeVisible();
    await user.keyboard('[Escape]');
    expect(screen.queryByTestId('zoomZoom')).not.toBeInTheDocument();
    await user.click(screen.getByTestId('bigImg-1'));
    await user.click(screen.getByTestId('expandedThumbnail-1'));
    expect(screen.getByTestId('zoomZoom').style.backgroundImage).toEqual(zoomzoomBG1);
    await user.click(screen.getByTestId('expandedThumbnail-0'));
    expect(screen.getByTestId('zoomZoom').style.backgroundImage).toEqual(zoomzoomBG0);
    await user.click(screen.getByTestId('zoomZoom'));
    expect(screen.queryByTestId('expandedThumbnail-0')).not.toBeInTheDocument();
    expect(screen.queryByTestId('expandedLeftArrow')).not.toBeInTheDocument();
    expect(screen.queryByTestId('expandedRightArrow')).not.toBeInTheDocument();
    expect(screen.queryByTestId('closeExpanded')).not.toBeInTheDocument();
    expect(screen.queryByTestId('toggleFullscreen')).not.toBeInTheDocument();
    await user.click(screen.getByTestId('zoomZoom'));
    expect(screen.getByTestId('expandedThumbnail-0')).toBeVisible();
    expect(screen.getByTestId('expandedLeftArrow')).not.toBeVisible();
    expect(screen.getByTestId('expandedRightArrow')).toBeVisible();
    expect(screen.getByTestId('closeExpanded')).toBeVisible();
    expect(screen.getByTestId('toggleFullscreen')).toBeVisible();
    await user.click(screen.getByTestId('toggleFullscreen'));
    await user.click(screen.getByTestId('toggleFullscreen'));
    await user.click(screen.getByTestId('closeExpanded'));
    expect(screen.queryByTestId('zoomZoom')).not.toBeInTheDocument();
    await user.click(screen.getByTestId('thumbnailImg-6'));
    await user.click(screen.getByTestId('rightArrow'));
    expect(screen.getByTestId('thumbnailImg-7')).toBeVisible();
    await user.click(screen.getByTestId('downArrow'));
    expect(screen.getByTestId('thumbnailImg-8')).toBeVisible();
    await user.click(screen.getByTestId('upArrow'));
    expect(screen.getByTestId('thumbnailImg-1')).toBeVisible();
    await user.click(screen.getByTestId('thumbnailImg-1'));
    await user.click(screen.getByTestId('leftArrow'));
    expect(screen.getByTestId('thumbnailImg-0')).toBeVisible();
    await user.click(screen.getByTestId('thumbnailImg-6'));
    await user.click(screen.getByText(/Bright Future Sunglasses/));
    await waitForElementToBeRemoved(() => screen.getByTestId('loading'));
    await new Promise((r) => setTimeout(r, 500));
    expect(screen.getByTestId('thumbnailImg-0')).toBeVisible();
    expect(screen.queryByTestId('thumbnailImg-1')).not.toBeInTheDocument();
    expect(screen.getByTestId('sizeSelect')).toBeDisabled();
    expect(screen.getByTestId('sizeSelect')).toHaveDisplayValue('OUT OF STOCK');


  });
});